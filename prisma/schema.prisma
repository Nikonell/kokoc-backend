generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  isAdmin      Boolean   @default(false)
  email        String    @unique
  firstName    String
  lastName     String
  passwordHash String
  comments     Comment[]
  cart         Cart?
}

enum ColumnCategory {
  transfer
  interview
  match
  pressRelease
}

model Column {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  category  ColumnCategory
  title     String
  summary   String
  content   String
  likes     Int[]          @default([])
  dislikes  Int[]          @default([])
  comments  Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String
  column    Column?  @relation(fields: [columnId], references: [id])
  columnId  Int?
  match     Match?   @relation(fields: [matchId], references: [id])
  matchId   Int?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

enum TeamRole {
  goalkeeper
  defender
  midfielder
  forward
  coach
}

model TeamMember {
  id          Int                    @id @default(autoincrement())
  createdAt   DateTime               @default(now())
  name        String
  birthDate   DateTime
  role        TeamRole
  info        String
  attachments TeamMemberAttachment[]
  highlights  TeamMemberHighlight[]
  statistics  TeamMemberStatistics?
  matches     Match[]                @relation("KokocMatchComposition")
}

model TeamMemberStatistics {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  gamesPlayed  Int        @default(0)
  goals        Int        @default(0)
  assists      Int        @default(0)
  yellowCards  Int        @default(0)
  redCards     Int        @default(0)
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  teamMemberId Int        @unique
}

model TeamMemberAttachment {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  filename     String
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  teamMemberId Int
}

model TeamMemberHighlight {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  title        String
  videoUrl     String
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  teamMemberId Int
}

model TeamStatistics {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  gamesPlayed    Int
  wins           Int
  winsOvertime   Int
  winsPenalty    Int
  lossesPenalty  Int
  lossesOvertime Int
  losses         Int
  goalsScored    Int
  goalsConceded  Int
  yellowCards    Int
  redCards       Int
  cleanSheets    Int
}

model Match {
  id                      Int                     @id @default(autoincrement())
  createdAt               DateTime                @default(now())
  matchName               String
  dateTime                DateTime
  videoUrl                String
  secondTeamName          String
  kokocGoalsScored        Int
  kokocGoalsConceded      Int
  secondTeamGoalsScored   Int
  secondTeamGoalsConceded Int
  kokocYellowCards        Int
  kokocRedCards           Int
  secondTeamYellowCards   Int
  secondTeamRedCards      Int
  result                  MatchResult
  kokocComposition        TeamMember[]            @relation("KokocMatchComposition")
  secondTeamComposition   SecondTeamComposition[]
  comments                Comment[]
}

model SecondTeamComposition {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  role      TeamRole
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId   Int
}

enum MatchResult {
  win
  loss
  draw
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  price     Float
  discount  Float
  carts     ProductsOnCart[]
}

model Cart {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
  products  ProductsOnCart[]
}

model ProductsOnCart {
  cart    Cart     @relation(fields: [cartId], references: [id])
  cartId  Int
  product Product  @relation(fields: [productId], references: [id])
  productId Int
  @@id([cartId, productId])
}
